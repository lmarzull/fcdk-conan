

include(FindPackageHandleStandardArgs)

message(STATUS "Conan: Using autogenerated Findgtest.cmake")
# Global approach
set(gtest_FOUND 1)
set(gtest_VERSION "1.8.1")

find_package_handle_standard_args(gtest REQUIRED_VARS gtest_VERSION VERSION_VAR gtest_VERSION)
mark_as_advanced(gtest_FOUND gtest_VERSION)



set(gtest_INCLUDE_DIRS "/home/lma/.conan/data/gtest/1.8.1/bincrafters/stable/package/4a8c5b4cd3b4d45b83fff85d53160ea02ae5fa2d/include")
set(gtest_INCLUDES "/home/lma/.conan/data/gtest/1.8.1/bincrafters/stable/package/4a8c5b4cd3b4d45b83fff85d53160ea02ae5fa2d/include")
set(gtest_DEFINITIONS )
set(gtest_LINKER_FLAGS_LIST "" "")
set(gtest_COMPILE_DEFINITIONS )
set(gtest_COMPILE_OPTIONS_LIST "" "")
set(gtest_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(gtest_LIBRARIES "") # Will be filled later
set(gtest_LIBS "") # Same as gtest_LIBRARIES



mark_as_advanced(gtest_INCLUDE_DIRS
                 gtest_INCLUDES
                 gtest_DEFINITIONS
                 gtest_LINKER_FLAGS_LIST
                 gtest_COMPILE_DEFINITIONS
                 gtest_COMPILE_OPTIONS_LIST
                 gtest_LIBRARIES
                 gtest_LIBS
                 gtest_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to gtest_LIBS and gtest_LIBRARY_LIST
set(gtest_LIBRARY_LIST gmock_main gmock gtest pthread)
set(gtest_LIB_DIRS "/home/lma/.conan/data/gtest/1.8.1/bincrafters/stable/package/4a8c5b4cd3b4d45b83fff85d53160ea02ae5fa2d/lib")
foreach(_LIBRARY_NAME ${gtest_LIBRARY_LIST})
    unset(CONAN_FOUND_LIBRARY CACHE)
    find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${gtest_LIB_DIRS}
                 NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
    if(CONAN_FOUND_LIBRARY)
        list(APPEND gtest_LIBRARIES ${CONAN_FOUND_LIBRARY})
        if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
            # Create a micro-target for each lib/a found
            set(_LIB_NAME CONAN_LIB::gtest_${_LIBRARY_NAME})
            if(NOT TARGET ${_LIB_NAME})
                # Create a micro-target for each lib/a found
                add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
            else()
                message(STATUS "Skipping already existing target: ${_LIB_NAME}")
            endif()
            list(APPEND gtest_LIBRARIES_TARGETS ${_LIB_NAME})
        endif()
        message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
    else()
        message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
        list(APPEND gtest_LIBRARIES_TARGETS ${_LIBRARY_NAME})
        list(APPEND gtest_LIBRARIES ${_LIBRARY_NAME})
    endif()
endforeach()
set(gtest_LIBS ${gtest_LIBRARIES})

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET gtest::gtest)
        add_library(gtest::gtest INTERFACE IMPORTED)
        
    if(gtest_INCLUDE_DIRS)
      set_target_properties(gtest::gtest PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${gtest_INCLUDE_DIRS}")
    endif()
    set_property(TARGET gtest::gtest PROPERTY INTERFACE_LINK_LIBRARIES ${gtest_LIBRARIES_TARGETS} "${gtest_LINKER_FLAGS_LIST}")
    set_property(TARGET gtest::gtest PROPERTY INTERFACE_COMPILE_DEFINITIONS ${gtest_COMPILE_DEFINITIONS})
    set_property(TARGET gtest::gtest PROPERTY INTERFACE_COMPILE_OPTIONS "${gtest_COMPILE_OPTIONS_LIST}")

        
    endif()
endif()
